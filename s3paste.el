;;; s3paste.el --- Paste to the web via s3cmd.

;; Copyright © 2016 Chris Clark

;; Author: Chris Clark
;; URL: https://github.com/chrisclark/s3paste
;; Version: 0.1.0
;; Created: 2016-07-26
;; Keywords: convenience hypermedia
;; EmacsWiki: S3Paste
;; Package-Requires: ((htmlize "1.39"))

;; This file is NOT part of GNU Emacs.

;;; Commentary:

;; This will place an HTML copy of a buffer on the web on an s3 bucket
;; that the user has access to.

;; It is based heavily (forked from, really) scpaste from Phil
;; Hagelberg.  Indeed, even this preamble is mostly identical.

;; It's similar in purpose to services such as http://paste.lisp.org
;; or http://rafb.net, but it's much simpler since it just uploads to
;; s3. It uses s3cmd (s3tools.org) as its transport and uses Emacs'
;; font-lock as its syntax highlighter instead of relying on a
;; third-party syntax highlighter for which individual language
;; support must be added one-by-one.  It also has support for
;; exporting org-mode documents as html and uploading them.

;;; Install

;; Add Marmalade as a package source, and then run M-x package-install
;; s3paste.  You will also need to have s3mcd installed and
;; configured.

;; Add this to your Emacs config:

;; (setq s3paste-http-destination "http://paste.untrod.org")

;; Optionally you can set the displayed name for the footer and where
;; it should link to:
;; (setq s3paste-user-name "Technomancy"
;;       s3paste-user-address "http://technomancy.us/")

;;; Usage

;; M-x s3paste, enter a name, and press return.  The name will be
;; incorporated into the URL by escaping it and adding it to the end
;; of `s3paste-http-destination'.  The URL for the pasted file will be
;; pushed onto the kill ring.

;;; License:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:

(require 'org)
(require 'url)
(require 'htmlize)

(defvar s3paste-http-destination
  "http://p.hagelb.org"
  "Publicly-accessible (via HTTP) location for pasted files.")

(defvar s3paste-user-address
  nil
  "Link to the user’s homebase (can be a mailto:).")

(defvar s3paste-user-name
  nil
  "Optional name to display in footer.
Will default to `user-full-name`.")

(defvar s3paste-bucket-name
  nil
  "The s3 bucket name.")

(defun s3paste-footer ()
  "HTML message to place at the bottom of each file."
  (concat "<p style='font-size: 8pt; font-family: monospace;'>Generated by "
          (let ((user (or s3paste-user-name user-full-name)))
            (if s3paste-user-address
                (concat "<a href='" s3paste-user-address "'>" user "</a>")
              user))
          " using <a href='http://blog.untrod.com/s3paste'>s3paste</a> at %s. "
          (cadr (current-time-zone)) ". (<a href='%s'>original</a>)</p>"))


;; Modified from https://www.emacswiki.org/emacs/misc-cmds.el Both
;; htmlize-buffer and org-html-export-as-html open a new window with
;; their generated contents. We kill them with this function to make
;; the paste experience seamless.
(defun s3paste-kill-buffer-and-its-windows (buffer)
  "Kill BUFFER and delete its windows.
BUFFER must be a buffer (not its name)."
  (let ((wins (get-buffer-window-list buffer nil t))) ; On all frames.
    (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
      (dolist (win wins)           ; (User might keep buffer if modified.)
        (when (window-live-p win)
          ;; Ignore error, in particular,
          ;; "Attempt to delete the sole visible or iconified frame".
          (condition-case nil (delete-window win) (error nil)))))))


(defun do-s3paste (original-name exporter)
  "Actually perform the paste.
Pastes the contents of ORIGINAL-NAME buffer using function
EXPORTER."
  (let* ((b (generate-new-buffer (generate-new-buffer-name "b")))
         (original-buffer (current-buffer))
         (name (replace-regexp-in-string "[/\\%*:|\"<>  ]+" "_"
                                         (if (equal "" original-name)
                                             (buffer-name)
                                           original-name)))
         (hb (funcall exporter))
         (full-url (concat s3paste-http-destination
                           "/" (url-hexify-string name) ".html"))
         (tmp-file (concat temporary-file-directory name))
         (tmp-hfile (concat temporary-file-directory name ".html")))

    ;; Save the files (while adding a footer to html file)
    (save-excursion
      (switch-to-buffer original-buffer)
      (copy-to-buffer b (point-min) (point-max))
      (switch-to-buffer b)
      (write-file tmp-file)
      (s3paste-kill-buffer-and-its-windows b)
      (switch-to-buffer hb)
      (goto-char (point-min))
      (search-forward "</body>\n</html>")
      (insert (format (s3paste-footer)
                      (current-time-string)
                      (substring full-url 0 -5)))
      (write-file tmp-hfile)
      (s3paste-kill-buffer-and-its-windows hb))

    (let* ((invocation "s3cmd put")
           (command-1 (concat invocation " " tmp-file " s3://" s3paste-bucket-name))
           (command-2 (concat invocation " " tmp-hfile " s3://" s3paste-bucket-name)))

      (let* ((error-buffer "*s3p-error*")
             (retval (+
                      (with-temp-message
                          (format "Executing %s" command-1)
                        (shell-command command-1 nil error-buffer))
                      (with-temp-message
                          (format "Executing %s" command-2)
                        (shell-command command-2 nil error-buffer))))
             (x-select-enable-primary t))
        (delete-file tmp-file)
        (delete-file tmp-hfile)
        ;; Notify user and put the URL on the kill ring
        (if (= retval 0)
            (progn (kill-new full-url)
                   (message "Pasted to %s (on kill ring)" full-url))
          (progn
            (pop-to-buffer error-buffer)
            (help-mode-setup)))))))

;;;###autoload
(defun s3paste (original-name)
    "Paste the current buffer via `s3cmd' to `s3paste-http-destination'.
If ORIGINAL-NAME is an empty string, then the buffer name is used
for the file name.  htmlize-buffer is the function to generate
the html."
  (interactive "MName (defaults to buffer name): ")
  (do-s3paste original-name 'htmlize-buffer))

;;;###autoload
(defun s3paste-org (original-name)
  "Paste the current buffer via `s3cmd' to `s3paste-http-destination'.
If ORIGINAL-NAME is an empty string, then the buffer name is used
for the file name.  org-html-export-as-html is the function to
generate the html."
  (interactive "MName (defaults to buffer name): ")
  (do-s3paste original-name 'org-html-export-as-html))

;;;###autoload
(defun s3paste-region (name)
  "Paste the current region via `s3paste'.
NAME is used for the file name."
  (interactive "MName: ")
  (let ((region-contents (buffer-substring (mark) (point))))
    (with-temp-buffer
      (insert region-contents)
      (s3paste name))))

(provide 's3paste)
;;; s3paste.el ends here
